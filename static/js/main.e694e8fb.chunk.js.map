{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","openSeaLink","setOpenSeaLink","currentAccount","setCurrentAccount","isLoading","setIsLoading","mintedSoFar","setMintedSoFar","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","chainId","alert","accounts","length","account","setupEventListener","checkIsMintedSoFar","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","getTotalNFTsMintedSoFar","isMintedSoFar","toNumber","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","on","from","tokenId","error","connectWallet","useEffect","className","onClick","href","target","alt","src","twitterLogo","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e694e8fb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","import \"./styles/App.css\";\r\nimport twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport myEpicNft from \"./utils/MyEpicNft.json\";\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = \"_buildspace\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\nconst TOTAL_MINT_COUNT = 50;\r\nconst CONTRACT_ADDRESS = \"0xF5fCF554fb6163F8Af3cAEbe356Fde09e112c136\";\r\nconst OPENSEA_LINK = `\"https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/\"`;\r\n\r\nconst App = () => {\r\n  const [openSeaLink, setOpenSeaLink] = useState(\"\");\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [mintedSoFar, setMintedSoFar] = useState(-1);\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n\r\n    let chainId = await ethereum.request({ method: \"eth_chainId\" });\r\n    console.log(\"Connected to chain \" + chainId);\r\n\r\n    // String, hex code of the chainId of the Rinkebey test network\r\n    const rinkebyChainId = \"0x4\";\r\n    if (chainId !== rinkebyChainId) {\r\n      alert(\"You are not connected to the Rinkeby Test Network!\");\r\n    }\r\n\r\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account);\r\n\r\n      // Setup listener! This is for the case where a user comes to our site\r\n      // and ALREADY had their wallet connected + authorized.\r\n      setupEventListener();\r\n    } else {\r\n      console.log(\"No authorized account found\");\r\n    }\r\n  };\r\n\r\n  const checkIsMintedSoFar = async (ethereum) => {\r\n    const provider = new ethers.providers.Web3Provider(ethereum);\r\n    const signer = provider.getSigner();\r\n    const connectedContract = new ethers.Contract(\r\n      CONTRACT_ADDRESS,\r\n      myEpicNft.abi,\r\n      signer\r\n    );\r\n\r\n    let isMintedSoFar = await connectedContract.getTotalNFTsMintedSoFar();\r\n    setMintedSoFar(isMintedSoFar.toNumber());\r\n  };\r\n\r\n  const askContractToMintNft = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        let chainId = await ethereum.request({ method: \"eth_chainId\" });\r\n        console.log(\"Connected to chain \" + chainId);\r\n\r\n        // String, hex code of the chainId of the Rinkebey test network\r\n        const rinkebyChainId = \"0x4\";\r\n        if (chainId !== rinkebyChainId) {\r\n          alert(\"You are not connected to the Rinkeby Test Network!\");\r\n        }\r\n\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const connectedContract = new ethers.Contract(\r\n          CONTRACT_ADDRESS,\r\n          myEpicNft.abi,\r\n          signer\r\n        );\r\n\r\n        console.log(\"Going to pop wallet now to pay gas...\");\r\n        let nftTxn = await connectedContract.makeAnEpicNFT();\r\n        setIsLoading(true);\r\n        console.log(\"Mining...please wait.\");\r\n        await nftTxn.wait();\r\n        setIsLoading(false);\r\n        console.log(\r\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\r\n        );\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // Setup our listener.\r\n  const setupEventListener = async () => {\r\n    // Most of this looks the same as our function askContractToMintNft\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        // Same stuff again\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const connectedContract = new ethers.Contract(\r\n          CONTRACT_ADDRESS,\r\n          myEpicNft.abi,\r\n          signer\r\n        );\r\n        checkIsMintedSoFar(ethereum);\r\n        // THIS IS THE MAGIC SAUCE.\r\n        // This will essentially \"capture\" our event when our contract throws it.\r\n        // If you're familiar with webhooks, it's very similar to that!\r\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\r\n          console.log(from, tokenId.toNumber());\r\n          setMintedSoFar(tokenId.toNumber() + 1); //id has incremented and we know that it is always incremented by 1. so im not making rpc call here to save loading time\r\n          setOpenSeaLink(\r\n            `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\r\n          );\r\n        });\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      /*\r\n       * Fancy method to request access to account.\r\n       */\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      /*\r\n       * Boom! This should print out public address once we authorize Metamask.\r\n       */\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n      // Setup listener! This is for the case where a user comes to our site\r\n      // and connected their wallet for the first time.\r\n      setupEventListener();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // Render Methods\r\n  const renderNotConnectedContainer = () => (\r\n    <button className=\"cta-button connect-wallet-button\">\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">My NFT Collection</p>\r\n          <p className=\"sub-text\">\r\n            Each unique. Each beautiful. Discover your NFT today.\r\n          </p>\r\n          {currentAccount === \"\" ? (\r\n            <button\r\n              onClick={connectWallet}\r\n              className=\"cta-button connect-wallet-button\"\r\n            >\r\n              Connect to Wallet\r\n            </button>\r\n          ) : (\r\n            <button\r\n              onClick={askContractToMintNft}\r\n              className=\"cta-button connect-wallet-button\"\r\n            >\r\n              Mint NFT\r\n            </button>\r\n          )}\r\n          {mintedSoFar >= 0 && (\r\n            <div className=\"text-white\">\r\n              {mintedSoFar}/{TOTAL_MINT_COUNT} NFTs minted so far\r\n            </div>\r\n          )}\r\n          {isLoading && <div className=\"text-white\">Waiting for your Nft to be minted</div>}\r\n          {openSeaLink.length > 0 && (\r\n            <a\r\n              className=\"cta-button connect-wallet-button\"\r\n              href={openSeaLink}\r\n              target=\"_blank\"\r\n            >\r\n              View In OpenSea\r\n            </a>\r\n          )}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}